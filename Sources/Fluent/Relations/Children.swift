/// The children relation is one side of a one-to-many database relation.
///
/// The children relation will return all the
/// models that contain a reference to the parent's identifier.
///
/// The opposite side of this relation is called `Parent`.
///
///     final class Pet: Model {
///         var userID: UUID
///         ...
///     }
///
///     final class User: Model {
///         var id: UUID?
///         ...
///         var pets: Children<User, Pet> {
///             return children(\.userID)
///         }
///     }
///
/// Create a new `Children` relation using the `Model.children(...)` method. The method accepts
/// a key path to the child's property that references its parent's ID.
///
/// `Children` structs (and other relations) are usually generated by stored properties on the model.
public struct Children<Parent, Child>
    where Parent: Model, Child: Model, Parent.Database == Child.Database
{
    /// Reference to the parent. This will be used later to access the ID.
    public var parent: Parent

    /// Internal parent  ID storage.
    internal enum ParentIDStorage {
        case optional(WritableKeyPath<Child, Parent.ID?>)
        case required(WritableKeyPath<Child, Parent.ID>)
    }

    /// Reference to the foreign key on the child.
    internal var parentID: ParentIDStorage

    /// Creates a new children relationship.
    internal init(parent: Parent, parentID: ParentIDStorage) {
        self.parent = parent
        self.parentID = parentID
    }

    /// Create a new `QueryBuilder` for the children relation.
    ///
    ///     let user: User
    ///     user.pets.query(on: conn).all()
    ///
    /// - parameters:
    ///     - conn: Database connection to use.
    /// - returns: Newly created `QueryBuilder`.
    public func query(on conn: DatabaseConnectable) throws -> QueryBuilder<Child.Database, Child> {
        let builder = Child.query(on: conn)
        switch parentID {
        case .optional(let parentID): try builder.filter(parentID == parent.requireID())
        case .required(let parentID): try builder.filter(parentID == parent.requireID())
        }
        return builder
    }
}

// MARK: Model

extension Model {
    /// Create a children relation for this model.
    ///
    ///     var pets: Children<User, Pet> {
    ///         return children(\.userID)
    ///     }
    ///
    /// The `parentID` should refer to the field on the child entity that contains the parent's ID.
    public func children<Child>(_ parentID: WritableKeyPath<Child, Self.ID>) -> Children<Self, Child> {
        return Children(parent: self, parentID: .required(parentID))
    }

    /// Create a children relation for this model.
    ///
    ///     var pets: Children<User, Pet> {
    ///         return children(\.userID)
    ///     }
    ///
    /// The `parentID` should refer to the field on the child entity that contains the parent's ID.
    public func children<Child>(_ parentID: WritableKeyPath<Child, Self.ID?>) -> Children<Self, Child> {
        return Children(parent: self, parentID: .optional(parentID))
    }
}
